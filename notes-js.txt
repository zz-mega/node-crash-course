html nouns
css adj
javascript verbs

5 types. Number (floating points, used for both decimals and ints)
       String, Boolean, undefined, null
	   
	   assignment operators work form right to left
	   x = y = 26
	   ^2  ^1
	   
you can use a switch as an if/else statement

  switch(true) { 
      case age < 13:
          console.log("Don't even talk to me squirt.");
          break;
		  ....
		  
This works because your comparison value is true, so the first case
that satisfies true is evaluated.
If you replace true with false, the logic is inverted.

var age = 24;
switch(age) {
   case age === 24:
     console.log("you're 24.");
   
   default:
   console.log("how'd you get here?");
}

This doesn't work because the first case evaluates to true, which is not equal
to 24, so the default is printed.

function is a container that holds code that you can get results from.

function statement (typical way you do the expression)

function expresson: functions set equal to values.

anything that evaluates to a value is an expression

var x; // not expression.
3+3 = 6 // an expression.
kill("myself") // not an expression.
statements perform actions, but do not produce results.

function declarations

function water() {
    var x = water is wet;
}

Arrays

john.push("Grandmother down stairs)     add to end of array
john.unshift("Put at the front of the line")  add to the start of the array.
john.pop("The last person out of line"); remove from the end
john.shift("Tackle the first person out of line");  //remove from the beginning
john.indexOf("fuck tapes"); // gives index, or -1 if not found.


objects (key value pairs)

john {birthYear: 1990};
var x = john.birthYear; // 1990

can also retrieve with bracket notation.

console.log(x ===john['birthYear']); //true

===================================
section -3

javascript is hosted in an environment (usually a browser)
This environment has a javascript engine that executes the code.
the code is checked by a parser that checks syntax.
Parser produces an Abstract Syntax Tree
This AST is converted to machine code, which runs.
 
 execution context == environment.

global context by default
  global? not inside a function, associated with the global object?
       global object? window.  
	       This means the execution context is an object.	   
		   
Execution stack:
  		controls the execution order of code. 
		
the global execution context is first.
  every function call makes a new execution context.
  
  every new execution context (ie a method call) goes on top of the stack
  when the top execution context on the stack finishes running code,
         it's taken off of the stack and the next context continues

How execution stacks are made:

execution context objects are created.

   they have three properties:
   variable object
   scope chain
   "this" variable
   
But how do we make those objects?
  
made in two phases:
   
   creation phase
     properties are created
	 
   execution phase
      function code gets run.   

exection context object contains:
   variable object
   scope chain
   "this" variable
explaining the creation phase.
    PT  1. creation of the Variable object
	      an argument object carrying what was passed to the function gets made.
		  code is scanned for function declarations; each one found creates a property in the VO pointing to it.
		       all the functions get stored in the variable object before the code executes. 
	      code is now scanned for variables declarations, and like the function declarations, each one is set to a property in the VO  
	           this time, the values are set to undefined.
			   
	  The process of putting the variables and function decs as properties in the VO is called HOISTING.
	  This means you can use declared functions before they're defined.
	  This Does Not Apply to function expressions
	  
	  
	  All functions and variables are hoisted in Javascript, which means they're known and available
	      Before The Code Executes.
		  
	  As stated before, the functions are known and defined. 
      Variables are known, but undefined. These are defined in the execution phase.
	  
PT 2	  	  creation of the scope chain

	  what does scoping do? Determine where we can access certain variables.
	  determination of what "this" is gonna be.
	  
	  only new functions create scopes.
	  
	  lexical scoping (where something is written in the code)
	    functions lexically within another function has access to the scope of the outer function.
		
		inner functions can access the scope (vars and functions) of outer functions.
		scopes look up
		
		scope chain is the order in which functions are written
		
		execution stack is the order in which functions are called.
		
pt 3 THIS		
		each execution context gets it's own this variable.
		in normal function calls, this points to the global object (window browser).
		
		in METHODS this points to the object calling it.
		
		this doesn't get a value until a function defining it gets called.
		  this is only assigned when an object calls a method. 
		      (makes sense because this is attached to an execution context, which comes from a function)
		
		if not, when you call a method with one object, then another object, this would be the
		first object even for the second one! functions wouldn't work properly!
		
		methods are attached to objects

		https://www.glassdoor.com/profile/joinNow_input.htm?hs=true&userOriginHook=GIVETOGET_HARDSELL
		
SECTION 3
   type selector
   basic elements {};


section 4

   textContent only sets plain text
  document.querySelector allows you to select html elements using their css classes/ids 
   
   document.querySelector(#idOfelement)
    
    WAAAY slower than get elementbyXYZ

   .innerHTML allows you to set HTML content. as well (the dom gets rebuilt completely when you do this.)	
   .insertAdjacentHTML allows you to add html content without rebuilding the DOM
   .textContent lets you change the text inside an html element w/o reloads //also gets hidden tags like script and style, so be cafeful
   Events  - notifications sent to inform code about something happening on the webpage
   eventListener - a function does something in response to an event.
   
   events are Only Processed when the Execution Stack is Empty
   
   MESSAGE QUEUE - Where js events are stored while they're waiting for the empty execution stack.
   
   because event listeners are functions, they of course create their own event listeners.
   
   callbacks. Functions passed into other functions are arguments that get called 
   
   anonymous functions  - functions without names, that can't be reused.
   
   style = "display:none" // hides the element.
      style = "display:block" // reveals the element.
	  
	  classList.add() //
	  classList.remove()
	  classList.toggle() // adds if missing ,removes if there.
	  
	  
	  section 5
	  
	  primitives (num, str, bool, und, null) (UNOWN s are primitives)
	  objects - everything else (Arrays, functions, objects, Dates, warappers for Nums, str, bools)
	  
	  object oriented programming
	    - objects interact with one another through methods and properties.
		
		Prototype (constructor) - acts like a class, creates instances
		inheritance  - objects based on other objects (get their methods and parameters)
		        person --> athelete
				
		Each JS Object has a Prototype Property, which makes inheritance possible		
		
		Methods and Properties Put in an Object's Prototype Property Can Be Inherited by others
		
		A constructor's prototype property isn't the prototpye of the constructor itself,
        but all instances created through it.		
		
		all objects are prototypes of the object class
		
		prototype chain.
		  when accessing properties/methods, js tries to find it on the object.
		    can't find it? Looks at the Object's Prototype for Inherited fields/methods
			 still can't find it? Looks at the parent's prototype,
			  repeat
			   
			   NULL is at the end of the prototype chain. It has no prototype, and you get undefined.
			   
			   function constructors start with cap letter.
			   
			   what's going on here?
			   
			   var john = new Person('John', '1990', 'teacher');
			   
			   1. new creates an empty object, MAKES THIS POINT TO THE EMPTY OBJ
			   2. function gets called.
			   
			   Why caps spam? Regular function calls point to the global object, if the NEW keyword
			   didn't create a new object and point this to it, all of your fields would point towards global.
			   
			   if teh constructor doesn't return anything, the result is the new object.
			   
			   adding methods to prototypes is very common, properties aren't nearly as common.
			   
			   .hasOwnProperty("propName") returns true if the peroperty belongs to the calling obj
			   
			   instanceOf returns true if the left hand obj inherits from the right hand object 
			   
			   object.create(parent_obj, paramobj) 
			     define parent object, create child objects.
				 
				 You have this goofy style for adding the params though.
				 
				 var child = object.create(parentObj,
				 {
				  first_name: {value:"T"},
				  last_name: {value: "Recks"}
				 });
				 
				 
				 
				 if one object references another object, changes to the object will be reflected across both.
				 both are remote controls to the televison that is the object.
				 If you change the channel with one remote, the channel changes for the other one.
				 
				 first class functions
				 
				 functions are also objects. therefore instances of object types.
				 You can pass functions to other functions, and return them from other functions.
				 
				 
				 width and height vw vw
				 
				immediately invoked function expressions
				
				what's inside of parenthesis cannot be a statement, so js will not throw and error
				on an unnamed function.
				 interviewQuestion('teacher')("Mark");
				 
				 iife - used to create scopes hidden from the outside scope where you can safely put
				          variables.
				 
				 (function(cocks) {
				   console.log("your nan sucked " + cocks + " cocks all day");
				   isWhore = true;
				 })(5);
				 
				 console.log("Is my nan a whore? " + isWhore); // whore isn't defined you muppet.
				 
				 
		CLOSURES		 
				 function retirement(retirementAge) {
        var a = ' years left until retirement.' 
        return function(yearOfBirth) {
            var age = 2016-yearOfBirth;
            console.log( (retirementAge - age) + a);
        }
    }

    var retirementUS = retirement(66);
    retirementUS(1990);
	
	 Why does this work? the inner function was returned.
	   The inner function needs the outer functions vars to work, so shouldn't it fail?
	 
	AN inner function always has access to the scope of an outer function, even after it returns.
				 
				 the scope chain is like a pointer to all var objects the function has access to.
				 
				 The scope chain is a pointer to variable objects. That's how a function knows what it
				 can access.
				 
				 
	after the retirement function returns, it's	execution context object is popped off of the call stack.
    it's variable object however, remains in memory with the scope chain pointing to it.	
	
	the scope chain always stays intact
	they are called closures because the inner functions execution context closes in on the outer functions
	execution context.
	
	BIND CALL AND APPLY

       CALL
    objects can borrow each other's methods with call.

    originatingObject.methodName.call(borrowingObj, params, params, etc..);
                                                         ^sets the this variable to the object borrowing the method
    
	APPLY 
	  very similar to call, except the second param is an array with all the params.
	  
	 BIND
       returns a function with preset arguments.
       This is super useful so you don't have to keep repeating parameters in function calls.

   var jonFriendly = jon.presentation.bind(jon, "friendly");
      jonFriendly("morning"); //john friendly morning greeting.	   
	  
	  
	  Program design considerations.
	  
	  Keep the dom strings in their own object. Use object.Desired string in element operations. This Avoids manual reassignment of strings if the names change.
	  write a getter in the UI module to return the domstrings object where you need it.
	  
	  to start the setup from the controller, you can return an object the init function that set ups the vars and such.
	  
	  dot notation follows the same rules as identifiers.
	  you can't use variables with dot notation
	  
	  you can put variables and any characters inside bracket notation (including starting with numbers)
	  as long as it resolves to a string.
				 北条麻妃
				 
				 
				 peppers, onions, garlic salt, basil, tomatoes
				 
		insertAdjacentHtml
        
		clear html fields field.value = ""
        use queryselectorAll > can designate multiple selectors by putting a comma between them in the string. querySelectorAll(".class1, class2");
		convert list to array > you can use Array.prototype.slice.call(arrayLike) [].slice.call()
		using foreach to loop over array.
		array.forEach() <-- put a callback or anon function here.
		    implicitly gives access to three parameters in THIS ORDER C i A  
			Current element
			Index
			Array itself
			
		htmlElement.focus() // puts the focus on that element, possible scrolling to it.	
		
		"keydown" fires when pressing a key 
		"keyup" fires when releasing a key
		    event.key to get the num representing the keypressed.
			querySelectorAll can be used to get multiple classes by putting a comma between 
			selectors
			
			getElementsByClassName can also do this, just put a space between class names.
			
			string.replace("targetString", replacement) to replace strings.
			
			
			
	Event delegation

         eventBubbling - when an event gets triggered, the same event is called on all parents,
		                          all the way up to the root element. The triggering element is called the target
						           		
                                 The target element is stored in the event object as a property.						
         because of this triggering chain, you can attach the event listeners to the parent object instead of the target.
		 
		 Event delegation Attaching an event handler to the target's parent, and catching it as it bubbles up
		 
		 That's dumb, why would you ever do that?
		 
		 case 1: a parent element, with a whole bunch of children. Would you want to set up listeners on each one? 
		            changing them all would be a complete nightmare.
					
		case 2: event handler attached to an element that isn't part of the dom after loading, but will be added later.			
		
		when the parent catches the event, you can use event.target to access the originating element.
		event.target.parentNode gets you the parent, and you can .parentNode.parentNode.parentNode chain them to go higher in the dom.

		You can't remove an element by directly selecting it in JS
		   you first have to move to the parent element, then use removeChild() function and pass
		   your element there
		   
		string.split (splits string into an array  based around a delimiter you pass in)
		      "j-sean-lemoine".split("-")  ==>  ['j','sean','lemonie']
			  
			  Array.from() breaks the string into a 'char' array 
			         Array.from("dick")  ==> ['d','i','c','k']
					 
	     Changing Array Contents (with array.splice)
		 
         var kek = ['l','o','l'];		
		  var x =kek.splice(1,1,'e');
		  clog(x) // ['o']
		  clog(kek) = ['l','e','l'];
          var top = kek.splice(2,0,"z");
          clog(top) // [];
          clog(kek) // ['l','e','l','z'];				  
		  kek.splice(2,1);
		  clog(kek) //  ['l','e','z'];	
          kek.splice(kek.length, 0, "b");
          clog(kek) //	  ['l','e','z','b'];		  
		  
		  [].splice();
		  
		  Map
		    runs a callback over an entire array, and has access to the CIA parameters.
			
			let sumbody = 0;
			array.map(function(current, index, array) {
			      sumbody+= current;
			});
			
			   Why would you use this over array.foreach?
			   Map puts the results in a new array and returns that 
		String manip:
        
        I did some division and got a number with like
        20 decimal points.
             
        I want cents.
        var num = 4.2032091490;
        
        num.toFixed(2);       
 
        4.2032091490 => num.toFixed(2) =>  4.20
       
		4.20   =>    num.toFixed()   =>  4
		4.2032091490 => num.toFixed() => 4
		4  =>  num.toFixed(2) => 4.00;
        4.46  => num.toFixed(1) => 4.5 
		Do you understand?
		
		getting current date:
		var now = new Date();
		now.getFullYear() // 2019
		now.getMonth() // 8 starts at 0 with january.
		
		var is function scope
		let and const are  block scoped.
		   what the heck is a block?
		   anything wrapped in curly braces (if, for, while)
		   
		   
		    if(true) {
			 let you = "use me"; <-- block
			 const respectsSelf = false;
			}
			console.log("I'll never let" +you + "."); //error (not defined outside of the block scope.
			
			
			if(youLoveMe) {
			  const relationship; // error, you have to give a value where it's declared.
			  relationship= "everlasting";
			  Console.log(our relationship is
			}
			
			Temporal Dead Zone
			You know how most languages don't let you use variables before they're assigned?
			
			javascript calls this the temporal dead zone
			  this only applies to let and const though.
			  var exists outside of the temporal dead zone, and declared vars ar assigned to undefined
			   
			   
			   soo... does that mean let and const aren't hoisted?
			      Actually, No. They are still hoisted, but not assigned by default to undefined.
				   They don't have variables like that.
				   
			DATA PRIVACY 
			
			instead of always using IIFE for data privacy, in ES6 you can use blocks 
            in concert with let and const to achieve the same end.
           
		   ES5
           ( function() {
             var a = 'c' })();

           ES6
		   {let a = 'c'}

		   ES6 STRING FEATURES
		   
		   
		   
		   //ES5
		   
		   let firstName = "john";
           let lastName = "smith";
           const yearOfBirth = 1990;
		   
            console.log('This is ' + firstName + ',' + lastName
            + ". He was born in "+ yearOfBirth + ". Today, he is " + calcAge(yearOfBirth) + 'years old.');

           // ES6
		   Template literals allow you to embed variables in strings without the cumbersome
		   + sign glue.
		   
           console.log(`This is ${firstName} ${lastName}.
           He was born in ${yearOfBirth}. Today he is ${calcAge(yearOfBirth)} years old.`);

           const n = `${firstName} ${lastName}`;
		   
		   // you can directly include variables into the string with the by using the ${} surround.
		   New Methods
		   
		   .startsWith()
		   .endsWith()
		   .includes()
		   
		   
		   Arrow functions
		    abbreviated way people do function expressions
			they cannot be named.
			
            es5
			var ages5 = years.map(function(el) {
			                 return 2019 - el;
			});
			console.log(ages5);

			It actually has three forms;
			
			One Arg One Line
				
			let ages6 = years.map( el => 2019-el);
			
			Multiple Args Single Line.
			(arg1, arg2) => arg1.push(arg2);
 
			need parenthesis around args
			
			Multiple Args, and Multiple Lines
		   (arg1, arg2, etc) => {
		     arg1 operation
			 arg2 operation
			 return;
		   }
		       Also need to include the return keyword.
		   
		   why add functions to the prototype rather than the constructor?
		   
		   in the constructor, each  variable has their own copy of the function
		   in the prototype, all objects ahve the reference to a single function.
		   
		   
		   ARRAYS
		   function canDrink(age) {
		     return age > 20
		   }
		   let participants = [18,33,27,50,22, 16, 17];
		   let oldEnough = participants.filter(age) // [33,27,50,22]
		   
		   array.filter(callback(CIA) => test);
		   A new array created with items that pass the test specified
		   
		   destructuring
		    used to assign elements from objects into variables transparently.
			
			const [a, b] = [1,2];
			console.log(a) // 1;
			
			destructuring while keeping the object's parameter names.
			obj ={interior: "alligator"}
			const{interior} = obj;
			
			  console.log(interior) // alligator
			  
			  destructuring while changing the object's parameter names
			  
			  const{interior:crocodile} = obj;
			  
			  console.log(crocodile); // alligator
			  
			  
			  Turn into an array.
			  Array.from();
			  
			  you can't break or use continue out of map or forEach loops;
			  
			  
			  
 for (const iterator of object) {
     
 }
 
 console.log(ages.findIndex(cur => cur >= 21)); // get index of true callback
console.log(ages.find(cur => cur >= 21)); // get element value of true callback

changes event returns if the person makes a choice
on an input event.

the spread operator ...
can expand an array into it's components.
console.log(...[1,2,3,4]); //1 2 3 4

You can also join arrays with it.
array1 = [1,2,3,4];
array2 = [5,6,7,8];
array3 = [...array1,...array2];
console.log(array3); // [1,2,3,4,5,6,7,8]

this works for node lists as well

the arguments keyword opens an arrayLike object
that contains all arguments passed to an array.

Even if the array doesn't take arguments, the ones
you pass will end up in the arguments object.

to use its elements like an array, you must transform it into one.

putting the spread operator in the function parameters
transforms the input into an array automatically.

function calculateDamage(...hitsReceived) {
	hitsReceived.forEach( //blah blah blah);
}

maiMap = new Map([ ["interior", crocodile Alligator]  ["chevrolet", "Movie Theater"]  [1, "PunchMan"]   ])

what are the biggest benefits to using maps vs objs?

YOu can use anything as keys
They are iterable.
You can get the size easily
simple addition/removal of map data.

CHAPTER 8 ASYNCHRONOUS CODE

Asynchronous javascript doesn't wait for a function to finish before moving on.
 Asyncs get called, and a callbeck is passed in that runs after the async finished in the background.
 A callback function activates after the main thread finishes.
 
WEB APIs live outside the javascript engine, but are usable as they are still in the js runtime. (basically locked threads)
callback functions are pushed inside the webAPI environments, where they execute
when they are finished, they are pushed into the message queue, which runs after the execution stack is empty.

The EVENT LOOP constantly monitors the call stack and the message queue.
 As soon as the stack is empty, the first callback in the message queue is pushed to the stack,
 creating a new execution context.
 
 Callback Hell
    Layers and Layers of nested callbacks, making reading/debugging difficult
	
Promise - object that keeps track of whether an async event happened, 
               and what to do if it does.
   promises have multiple states:
   
   [Pending] ==Event==>  [Settled]/ [Resolved]   Fulfilled(success)/Rejected(failed) 
   
   Syntax
   new Promise(executor(callbackForSuccess, callbackForFailure) => {
       function( () => {
	       
		   resolve(results of Success);
		   reject(results of Failure);
	   }
   })
   
   ASYNC keyword
   
      async function suggestVideos() {
	  }
   
   async functions Always Run In The Background
   
   Promises inside of them are consumed by putting before the promise function on the 
         
	async function suggestVideos() {
	       	     const rows = await loadFromDB(searchTerms);
	  } 

   
   Async functions always return promises.
   Always.
   
   suggestVideos(); // <-- promise
   
   So you can consume those with then()
   
   suggestVideos().then(results => )
   
   
   AJAX -->  Asynchronous Javascript And XML
   A technique to send and retrieve data from a server without reloading a webpage.
   
   APIS -->  Application Programming Interface
   a piece of software that can be used by another piece of software 
   
    FETCH
	fetch(URLTarget) - gets a resource from a network, returning a promise.
	

	Same Origin Policy --- Prevents ajax requests from a domain different from own domain.
	
	??Cross origin resource sharing??
	
	in async/await functions, you can't use .catch() for error handling.
	Instead, wrap await variables in a try block, and catch errors 
	
	async AWfunction {
	   try {
	   let results = await serverCall();
	   } catch(error ) {
	         console.log(error); 
		  }
	}
	
	
	Use Babel to convert ES6+ down to ES5 for older browers.
	
	USING THE COMMAND LINE
	
	 in the command line, you're always in a folder
	
	List all contents of folder
	Unix ls
	Win  dir
	
	Change directory/folder
	cd
	
	Jump up to parent folder
	cd ..
	
	clear command line
	unix: clear
	win: cls
	
	Make New Folder
	mkdir [filename]
	
	Make New File
	unix: touch [filename]
	win: copy nul [filename.extension]
	
    Copy File
	unix:  cp [filename] [target dir]
	win: copy  [*see above]
	
	Move File
	unix: mv [filename/dir] [target dir]
	win: move [*see above]
	
	Delete File *WARNING SKIPS THE RECYCLE BIN*
	unix: rm [file1] [fil2] [etc...]
	win: del [*see above]
	
	Delete Folder
	unix: rm -r [folderName] // -r is a flag which tells the os to remove everything inside, then itself (recursive)
	win: rmdir /S [folderName]
	
	Open file
	unix: open [filename] //opens with default associated program.
	win: start [*same]
     
	 
	 USING NODE
    
	Creating package json file
	npm init
      	 
	Installing new packages
	npm install [package] --save-dev // --save-dev  saves files as a development dependency
	                                 --global  OR -g// allows use across the entire system, not just in the program
									 
	WEBPACK 
     four key properties for the object	
	Entry point 
    output
    plugins
    loaders	
	
in the config file	
   entry point- where webpack starts looking for dependencies to bundle
       entry:['FILEPATH', ]
									 
	Output - where webpack saves the bundled files.
             This is an object, with two properties: the path: and filename:
                          //The Path Must Be An Absolute Path
             output: { path: 'yourAbsolutePathName', filename:'filename.js'}	
   Plugins - help process input files   
   Loaders - load and process files 
   
   
   after installing the webpack cli  (with npm install webpack-cli --save-dev)

	Module controller view								 
									 
	default exports - when you want to export only one thing from a module
     ex:   export default 'I am an expored string.';
	 
	 restrictions: one per module!
   
    Importing Default
      ex:import str from './models/Search';
	
    named exports - when you want to export multiple things from a module
     export const add = (a,b) => a+b;
     export const multiply = (a,b) => a*b;
     export const ID = 23;	 
	
     Importing NAMED: import {add, multiply, ID}	from './views/searchView';
	
      I'm having name conflicts when importing files. What do I do?
	  
	  ex: import {oldName as Newname} from '/path/to/file'
									 
	 Importing Everything
       ex: import * as searchView from './path/to/file';	   
									 
	API keys -> keeps track of user activity such as number of requests								 
									 
	when putting async functions inside of class definitions, just Add async Before the Method Name
									 
	async - call air support, keep fighting
    sync  - load main cannon to fire
    concurrent - firing machine gun between cannon shots
    parallel - two tanks fighting together.	
									 
	npm run start ==> updates when saving index.js					 
	===========================================================

    event.preventDefault(); //stops the event from doing anything you don't specify.	
	
	
	For html elements, you can use the data-(valueName) = "value"  attribute to store extra information for your javascript.
	
	<button class = "nextBtn"  data-goto = "5" > </button>
	use  element.dataSet(paramName) to get to that info you stored.
	
	If you have a button or container with lots of subelements, using the event.target can return unwanted child elements.
	
	element.closest("selector string")
	
	lets you specify which part of the dom to work with and set events.
===========================================================================

NODEJS
    A container where a program written in javascript may be executed outside of the browser.
    This uses google's V8 javascript engine to parse and run the code.

    You can use nodeJS as a web server and build backend applications with it.

    Install nodemon to automatically restart node upon changes (like liveserver);
    
    npm install nodemon -g

    to use, type nodemon instead of node when running code.

    Accessing the Filesystem
        Node.js allows you to access the filesystem using
            const fs = require("fs");
            fs.readFileSync("absolute/file/path", "characterEncoding");
            

            The __dirname var makes getting the abs path easier by giving you the current path.
                fs.readFileSync(`${__dirname}/data/data.json`, "utf-8");


    Starting a Server

        const http = require("http");
        const server = http.createServer( (request, response) => {
                //actions.
        });

        Once the server is created, you have to tell it the ip address and port to listen to.

        server.listen(portNum, ip, optional_callback)


        When someone accesses the server on the port we're listening to,
        we have to send at least a two part response back to them.

            1. The http header - additional information about the response (status code + content type)
            2. The actual content.


        server.writeHead(200, { "Content-type": "text/html" }) // 200 means success, content type must be an object.
        server.end("this closes the response");



    Routing
        Routing is responding in different ways for different URLS.

            google.com 
            google.com/maps (gives the map web app) 


        const server = http.createServer( (request, response) => {
            const urlStr = response.url // /maps
        });
        Node has an inbuilt url module for turning this data into an object.

        const url = require('url');

        ...
        => {
        const pathName = url.parse( request.url,true).pathname // true makes it create an obj, which has a pathname key
        }


	A BOY uses forbidden magic to summon a familiar.
    Things light up, but there is no monster 
    Thinking he failed, he goes to sleep
	
	ALTERNATIVE
	 (there is an explosion in the distance) //
	 he runs outside, in a panic.
	 An outside wall is in ruins and he sees something melt away into the night.
	 He knows the alarm has been raised, so he hides inside of his house.   
	 
	 MAYBE he's casting the ritual on/near someone else's property or an abandoned/dilapidated structure.
	 The explosion happens to be near that guy whose parents are shunned, and their child gets blamed.
    
    The next day, a part of a stone barrier is utterly ruined.
    A friend/acquaintance who is an outcast and a suspected witch/wizard is blamed for the crime.
    Our friend does keeps slient. Better them than me.
    The situation gets worse.
    More disturbances happen.
    Until he has to face what he has done.	
	
	The thing is unable to properly comunicate, and is grotesqure
	Hideously deformed because the summoning was botched
	Creature wants to return to original form
	boy wants to destroy it before it can do so.
	Creature becomes complete, turns on boy.
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
									 
	11-13-19 complaining about wrangling people to speak arabic, and how 
	he isn't getting the help he needs. Complaining about 			 
				 